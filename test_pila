from pila import Stack
from random import randint #todo randint, funcion que devuelve un numero randomico.

pila = Stack()
pila_aux = Stack() #!En ella almacenamos los valores de pila original, asi cuando hacemos el barrido (listamos, y aplicamos el pila.pop) no se pierden los valores.
#!Ejercicio 2
"""
for i in range(10):
    pila.push(randint(1, 99))

while pila.size() > 0: #! Comprobamos que la pila no este vacia.
    data = pila.pop()
    print(data)
    if data % 2 == 0: #! Hallamos el modulo (resto) del top (la cima de la pila), y comparamos con 1. Dado que si el resto es igual a 1 el numero es impar.
        pila_aux.push(data) #! Eliminamos el top de la pila (impar).

while pila_aux.size() > 0:
    pila.push(pila_aux.pop()) #! Reconstruimos la pila unicamente con los numeros pares.

print()
print(pila.size())
"""
"""
#!Ejercicio 1
#l Determinar el número de ocurrencias de un determinado elemento en una pila.
for i in range(10):
    pila.push(randint(1, 10))

ocurrencia = int(input("Ingrese el numero a encontrar de un determinado elemento: "))
aux = 0

while pila.size() > 0:
    data = pila.pop()
    print(data)
    if data == ocurrencia:
        aux = aux + 1

print("El numero de ocurrencias de ", ocurrencia, "es de: ", aux)
"""
"""
#!Ejercicio 3
#l Reemplazar todas las ocurrencias de un determinado elemento en una pila.
for i in range(10):
    pila.push(randint(1, 10))

reemplazo = int(input("Ingrese el numero al que desea cambiar todas las ocurrencias: "))
aux = -1

while pila.size() > 0:
    data = pila.pop()
    print(data)
    if data == reemplazo:
        pila_aux.push(aux) #!Reemplazamos los valores por -1
    else:
        pila_aux.push(data)
    
print()
while pila_aux.size() > 0:
    pila.push(pila_aux.pop())
    print(pila.pop())
"""
"""
#! Ejercicio 4
#l Invertir el contenido de una pila, solo puede utilizar una pila auxiliar como estructura extra.

#! Barrido de la pila.
for i in range(10):
    pila.push(randint(1, 10))

#! Listar
while pila.size() > 0:
    data = pila.pop()
    print(data, end = ' ')
    pila_aux.push(data)

print()
#! Reconstruccion
while pila_aux.size() > 0:
    pila.push(pila_aux.pop())
    print(pila.pop(), end=' ')
"""

#! Ejercicio 5
x = Stack()
y = Stack()
#l Determinar si una cadena de caracteres es un palíndromo.
palabra = input("Ingrese una cadena: ")
cadena = palabra.replace(" ", "").lower() #Eliminamos espacios y convertimos a minusculas.
#// lista = [cadena]
#// print(lista)
tamaño = len(cadena)
#// print(tamaño)
caracteres = list(cadena)
palindromo = True
if  len(caracteres) > 0:
    for i in range(len(caracteres)):
        aux = caracteres.pop()
        pila.push(aux)
        pila_aux.push(aux)
if pila.size() > 0:
    for i in range(pila.size()):
        aux = pila.pop()
        caracteres.append(aux)
if pila_aux.size() > 0:
    for i in range(pila_aux.size()):
        aux = caracteres.pop()
        aux2 = pila_aux.pop()
        if aux != aux2:
            palindromo = False
if palindromo:
    print("Es palindromo: ", palabra)
else:
    print("No es palindromo: ", palabra)
                

#// print(caracteres)

# for i in range(tamaño):
#     letra = caracteres.pop()
#     pila.push(letra)
#     data = pila.pop()
#     print(data)
#     pila_aux.push(data)


# #! Listar
# while pila.size() > 0 and pila_aux.size() > 0:
#     data = pila.pop()
#     data2 = pila_aux.pop()
#     print("data valor: ", data)
#     if data != data2:
#         palindromo = False
#         break

# print("soy palindromo: ", palindromo )

"""
#! Reconstruccion
while pila_aux.size() > 0:
    data2 = pila.pop()
    pila.push(pila_aux.pop())
    print(pila.pop())
"""

#!Ejercicio 16
"""
Se tienen dos pilas con personajes de Star Wars, en una los del episodio V de “The empire
strikes back” y la otra los del episodio VII “The force awakens”. Desarrollar un algoritmo que
permita obtener la intersección de ambas pilas, es decir los personajes que aparecen en ambos
episodios.
"""






    







