from pila import Stack
from random import randint #todo randint, funcion que devuelve un numero randomico.

pila = Stack()
pila_aux = Stack() #!En ella almacenamos los valores de pila original, asi cuando hacemos el barrido (listamos, y aplicamos el pila.pop) no se pierden los valores.

#!Ejercicio 2
"""
for i in range(10):
    pila.push(randint(1, 99))

while pila.size() > 0: #! Comprobamos que la pila no este vacia.
    data = pila.pop()
    print(data)
    if data % 2 == 0: #! Hallamos el modulo (resto) del top (la cima de la pila), y comparamos con 1. Dado que si el resto es igual a 1 el numero es impar.
        pila_aux.push(data) #! Eliminamos el top de la pila (impar).

while pila_aux.size() > 0:
    pila.push(pila_aux.pop()) #! Reconstruimos la pila unicamente con los numeros pares.

print()
print(pila.size())
"""
"""
#!Ejercicio 1
#l Determinar el nÃºmero de ocurrencias de un determinado elemento en una pila.
for i in range(10):
    pila.push(randint(1, 10))

ocurrencia = int(input("Ingrese el numero a encontrar de un determinado elemento: "))
aux = 0

while pila.size() > 0:
    data = pila.pop()
    print(data)
    if data == ocurrencia:
        aux = aux + 1

print("El numero de ocurrencias de ", ocurrencia, "es de: ", aux)
"""

#!Ejercicio 3
#l Reemplazar todas las ocurrencias de un determinado elemento en una pila.

for i in range(10):
    pila.push(randint(1, 10))

reemplazo = int(input("Ingrese el numero al que desea cambiar todas las ocurrencias: "))
aux = -1
while pila.size() > 0:
    data = pila.pop()
    print(data)
    if data == reemplazo:
        pila_aux.push(aux) #!Reemplazamos los valores por -1
    else:
        pila_aux.push(data)
    
print()
while pila_aux.size() > 0:
    pila.push(pila_aux.pop())
    print(pila.pop())



